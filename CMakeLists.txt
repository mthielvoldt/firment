# TODO: this should probably be passed in from project somehow. 
set(PROTO_FILE ${PROJECT_SOURCE_DIR}/messages.proto)

set(NANOPB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/protocol/nanopb)
set(PLUGIN_DIR ${CMAKE_CURRENT_SOURCE_DIR}/protocol/pb-plugins)
set(PROTOC ${NANOPB_DIR}/generator/protoc)

add_library(FirmentFW
  ${CMAKE_CURRENT_BINARY_DIR}/messages.pb.c # generated by protoc
  ${CMAKE_CURRENT_BINARY_DIR}/fmt_rx.pb.c   # generated by protoc-gen-firment plugin
  firmware/fmt_spi.c
  firmware/queue.c
  firmware/fmt_hardfault.c
  firmware/fmt_waveform.c
  firmware/fmt_log.c
  firmware/ghostProbe.c
  ${NANOPB_DIR}/pb_encode.c
  ${NANOPB_DIR}/pb_decode.c
  ${NANOPB_DIR}/pb_common.c
)

# Generate the version header for the firmware
configure_file(firmware/fmt_version.h.in version.h)

# This generates messages from "messages.proto" in project root directory.
# TODO: make a target that creates the gen-venv. 
# TODO: move widgets out of 
add_custom_command(
  OUTPUT  messages.pb.c messages.pb.h fmt_rx.pb.c
  COMMAND 
    . ${CMAKE_CURRENT_SOURCE_DIR}/protocol/gen-venv/bin/activate && 
    ${PROTOC}
      -I${PROJECT_SOURCE_DIR}
      --plugin=protoc-gen-firment=${PLUGIN_DIR}/gen-firment.py
      --nanopb_out=${CMAKE_CURRENT_BINARY_DIR}
      --firment_out=${CMAKE_CURRENT_BINARY_DIR}
      --plugin=protoc-gen-widgets=${PLUGIN_DIR}/gen-widgets.py
      --widgets_out=${CMAKE_CURRENT_BINARY_DIR}
      ${PROTO_FILE}
  DEPENDS ${PROTO_FILE}
)

target_link_libraries(FirmentFW
  PRIVATE
    MCUPort
)

target_include_directories(FirmentFW 
  PRIVATE
    ${PROJECT_SOURCE_DIR}/firmware # ISR_Config.h used by fmt_spi
    ${CMAKE_CURRENT_BINARY_DIR} #  fmt_rx_pb.c > fmt_spi.h > messages.pb.h
  PUBLIC
    firmware/lib/CMSIS-6.1.0/Driver/Include # fmt_rx_pb.c > fmt_spi.h > Driver_SPI.h
    protocol/nanopb # fmt_spi.h > messages.pb.h > pb.h
    firmware # fmt_rx.h used by fmt_rx.pb.c
  INTERFACE     # Consuming targets need these headers, but this library doesn't
    ${CMAKE_CURRENT_BINARY_DIR}
)