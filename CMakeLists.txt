
# Creates a virtual environment (venv) for protobuf generation if not present. 
include(protocol/nanopb_py_env.cmake)

# TODO: this should probably be passed in from project somehow. 
set(PROJECT_PROTO ${PROJECT_CONFIG_DIR}/messages.proto)
set(PROBES_PROTO ${PROJECT_CONFIG_DIR}/probes.proto)
set(NANOPB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/protocol/nanopb)
set(PLUGIN_DIR ${CMAKE_CURRENT_SOURCE_DIR}/protocol/pb-plugins)
set(PROTOC ${NANOPB_DIR}/generator/protoc)

add_library(FirmentFW
  ${CMAKE_CURRENT_BINARY_DIR}/messages.pb.c # generated by protoc
  ${CMAKE_CURRENT_BINARY_DIR}/firment_msg.pb.c
  ${CMAKE_CURRENT_BINARY_DIR}/fmt_rx.pb.c   # generated by protoc-gen-firment plugin
  firmware/fmt_comms.c
  firmware/fmt_gpio.c
  firmware/fmt_hardfault.c
  firmware/fmt_log.c
  firmware/fmt_spi.c
  firmware/fmt_uart.c
  firmware/fmt_uart_frame.c
  firmware/fmt_update.c
  firmware/fmt_version.c
  firmware/fmt_waveform.c
  firmware/ghostProbe.c
  firmware/queue.c
  ${NANOPB_DIR}/pb_encode.c
  ${NANOPB_DIR}/pb_decode.c
  ${NANOPB_DIR}/pb_common.c
)

# Generate the version header for the firmware
configure_file(firmware/fmt_version.h.in fmt_version.h)

# Generate firment.proto with field size/length values filled in from vars from
# firmentConfig.cmake (in project's config dir)
configure_file(protocol/firment_msg.in.proto firment_msg.proto)

# Generate fmt_update.h containing memory region info shared with bootloader.
configure_file(firmware/fmt_update.in.h fmt_update.h)


# Note that the UI code puts compiled/generated files much closer to the source.
set(UI_DIR ${CMAKE_CURRENT_SOURCE_DIR}/web-ui)
set(UI_DIST_DIR      ${UI_DIR}/dist)
set(UI_SRC_DIR       ${UI_DIR}/src)
set(UI_GENERATED_DIR ${UI_DIR}/src/generated)

# This generates messages from "messages.proto" in project root directory.
# TODO: make a target that creates the gen-venv. 
# TODO: move widgets to a more UI-oriented output location
# Note: in the command's last line, where the .proto files are listed, 
#   firment_msg.proto must *NOT* be prefixed with absolute path, or protoc won't 
#   recognize that it's the same file included by messages.proto, and everything 
#   defined in firment_msg.proto will appear to protoc as defined twice. 
add_custom_command(
  OUTPUT  messages.pb.c firment_msg.pb.c fmt_rx.pb.c ${UI_GENERATED_DIR}/widgets.pb.tsx
  COMMAND 
    ${VENV_ACTIVATE} &&
    mkdir -p ${UI_GENERATED_DIR} &&
    ${PROTOC}
      -I ${PROJECT_CONFIG_DIR}  # messages.proto, probes.proto
      -I ${CMAKE_CURRENT_BINARY_DIR} # firment_msg.proto
      --plugin=protoc-gen-firment=${PLUGIN_DIR}/gen-firment.py
      --plugin=protoc-gen-widgets=${PLUGIN_DIR}/gen-widgets.py
      --firment_out=${CMAKE_CURRENT_BINARY_DIR}
      --widgets_out=${UI_GENERATED_DIR}
      --nanopb_out=${CMAKE_CURRENT_BINARY_DIR}
      ${PROJECT_PROTO} firment_msg.proto ${PROBES_PROTO} 
  DEPENDS
    ${VENV_DIR}
    ${PLUGIN_DIR}/gen-firment.py
    ${CMAKE_CURRENT_SOURCE_DIR}/firmware/fmt_rx.in.c
    ${PLUGIN_DIR}/gen-widgets.py
    ${PROBES_PROTO}
    ${PROJECT_PROTO}
    ${CMAKE_CURRENT_BINARY_DIR}/firment_msg.proto
)

target_link_libraries(FirmentFW
  PRIVATE
    MCUPort
)

configure_file(web-ui/src/updatePage.ts.in
  ${CMAKE_CURRENT_SOURCE_DIR}/web-ui/src/generated/updatePage.ts)

target_include_directories(FirmentFW 
  PRIVATE
    ${APP_FW_CONFIG_DIR} # fmt_rx.pb.c > project_comms.h
    ${APP_FW_CONFIG_DIR}/pcb${PCB}  # <feat>pcbDetails.h
  PUBLIC
    ${CMAKE_CURRENT_BINARY_DIR} #  fmt_rx_pb.c > fmt_spi.h > messages.pb.h
    firmware/lib/CMSIS-6.1.0/Driver/Include # fmt_rx_pb.c > fmt_spi.h > Driver_SPI.h
    protocol/nanopb # fmt_spi.h > messages.pb.h > pb.h
    firmware # fmt_rx.h used by fmt_rx.pb.c
)


### From here down in the file is the firment web-UI "library"
# TODO: custom_targets always build make this not always buil
add_library(FirmentUI INTERFACE 
  ${UI_DIST_DIR}/generated/messages.js  # go farther upstream?
  ${UI_DIST_DIR}/src/Reset.js
)

add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/web-ui/node_modules
  WORKING_DIRECTORY ${UI_DIR}
  COMMAND npm install --no-audit
  DEPENDS ${UI_DIR}/package.json
)

add_custom_command(
  OUTPUT ${UI_DIST_DIR}/src/Reset.js
  WORKING_DIRECTORY ${UI_DIR}
  COMMAND npm run build
  DEPENDS
    ${UI_SRC_DIR}/plot/axisTools.ts
    ${UI_SRC_DIR}/plot/Plot.css
    ${UI_SRC_DIR}/plot/Plot.tsx
    ${UI_SRC_DIR}/plot/plotColors.ts
    ${UI_SRC_DIR}/plot/plotLabeler.ts
    ${UI_SRC_DIR}/plot/PlotLabels.tsx
    ${UI_SRC_DIR}/plot/plotModel.tsx
    ${UI_SRC_DIR}/plot/traceStats.ts
    ${UI_SRC_DIR}/App.css
    ${UI_SRC_DIR}/BrokerAddress.tsx
    ${UI_SRC_DIR}/updatePage.ts.in
    ${UI_SRC_DIR}/Image.tsx 
    ${UI_SRC_DIR}/index.ts
    ${UI_SRC_DIR}/Log.tsx
    ${UI_SRC_DIR}/mockSignal.tsx
    ${UI_SRC_DIR}/mqclient.tsx # Should be .ts
    ${UI_SRC_DIR}/Reset.tsx
    ${UI_SRC_DIR}/Version.tsx
)

add_custom_command(
  OUTPUT ${UI_SRC_DIR}/generated/messages.js
  COMMAND 
    ${UI_DIR}/node_modules/protobufjs-cli/bin/pbjs
      -p ${NANOPB_DIR}/generator/proto
      -p ${CMAKE_CURRENT_BINARY_DIR}
      -p ${PROJECT_CONFIG_DIR}
      -t static-module
      -w es6
      -o ${UI_SRC_DIR}/generated/messages.js
      ${PROJECT_PROTO}
  DEPENDS
    ${PROBES_PROTO}
    ${PROJECT_PROTO}
    ${CMAKE_CURRENT_BINARY_DIR}/firment_msg.proto
    ${UI_DIR}/node_modules/ # Does this re-run when any package inside changes?
)

add_custom_command(
  OUTPUT ${UI_SRC_DIR}/generated/messages.d.ts
  COMMAND
    ${UI_DIR}/node_modules/protobufjs-cli/bin/pbts
    -o ${UI_SRC_DIR}/generated/messages.d.ts
    ${UI_SRC_DIR}/generated/messages.js
  DEPENDS
    ${UI_SRC_DIR}/generated/messages.js
    ${UI_DIR}/node_modules/
)

add_custom_command(
  COMMENT "Copy generated messages.(js/d.ts) to dist/generated."
  OUTPUT ${UI_DIST_DIR}/generated/messages.js ${UI_DIST_DIR}/generated/messages.d.ts
  WORKING_DIRECTORY ${UI_DIR}
  COMMAND 
    mkdir -p ${UI_DIST_DIR}/generated &&
    cp src/generated/messages.* dist/generated/
  DEPENDS 
    ${UI_SRC_DIR}/generated/messages.d.ts
)
