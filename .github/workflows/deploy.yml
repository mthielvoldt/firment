# Simple workflow for deploying static content to GitHub Pages
name: Build. On push-to-main, Deploy to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: 
      - 'main'
  pull_request:
    branches:
      - 'main'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Cmake Build
        run: . run-tests.sh

  build:
    needs: test
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./example
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Store secrets
        env: 
          KEY_0: ${{ secrets.KEY_0_BASE64 }}
          KEY_0_PUB: ${{ secrets.KEY_0_PUB_BASE64 }}
        run: |
          mkdir -p build/build-keys
          echo $KEY_0 | base64 --decode > build/build-keys/key.der
          echo $KEY_0_PUB | base64 --decode > build/build-keys/key_pub.der
          chmod 600 build/build-keys/*
      
      - name: Restore ARM Toolchain from Cache
        id: cache-restore-arm-toolchain
        uses: actions/cache/restore@v4
        with:
          path: /opt/arm-none-eabi
          key: arm-toolchain-${{ runner.os }}-13.3.rel1-x86_64
      
      - name: Install ARM Toolchain
        if: steps.cache-restore-arm-toolchain.outputs.cache-hit != 'true'
        run: |
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu/13.3.rel1/binrel/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi.tar.xz
          sudo tar -xf arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi.tar.xz -C /opt
          sudo mv /opt/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi /opt/arm-none-eabi
          rm arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-eabi.tar.xz

      - name: Save ARM Toolchain to Cache
        if: steps.cache-restore-arm-toolchain.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: /opt/arm-none-eabi
          key: arm-toolchain-${{ runner.os }}-13.3.rel1-x86_64

      - name: Add to Path
        run: echo "/opt/arm-none-eabi/bin" >> $GITHUB_PATH
      - name: Verify Installation
        run: arm-none-eabi-gcc --version

      - name: Get submodule hashes
        id: submodule-hashes
        run: echo "wolfboot=$(git -C mgt-boot/deps/wolfBoot/ rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Restore build-tools from cache
        id: restore-build-tools
        uses: actions/cache/restore@v4
        with:
          path: example/build/build-tools
          key: build-tools-${{ steps.submodule-hashes.outputs.wolfboot }}
      
      - name: Restore venv from cache
        id: restore-venv
        uses: actions/cache/restore@v4
        with:
          path: example/build/venv
          key: venv-${{ hashFiles('protocol/nanopb_py_env.cmake') }}

      - name: Cmake Build
        run: . build-xmc.sh

      - name: Save venv to cache
        if: steps.restore-venv.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: example/build/venv
          key: venv-${{ hashFiles('protocol/nanopb_py_env.cmake') }}

      - name: Save build-tools to cache
        if: steps.restore-build-tools.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: example/build/build-tools
          key: build-tools-${{ steps.submodule-hashes.outputs.wolfboot }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: example/web-ui/package-lock.json
      - name: Build UI
        run: cd web-ui && npm run build
      - name: Upload artifact
        # only upload artifacts if this job is triggered by a push to main. 
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist folder
          path: './example/web-ui/dist'
  
  deploy:
    # Only run on pushes and manual triggers targeting the main branch. 
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-22.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    defaults:
      run:
        working-directory: ./example/web-ui
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4