

syntax = "proto3";
// rename: proj_config.proto since it includes MaxSizes (not just GP)
import "probes.proto";
import "nanopb.proto";

message RunScanCtl {
  bool isContinuous = 1;
  SampleFreq freq = 2;
  TestPointId probe_0 = 3;
  TestPointId probe_1 = 4;
  TestPointId probe_2 = 5;
  TestPointId probe_3 = 6;
  TestPointId probe_4 = 7;
  TestPointId probe_5 = 8;
}

message ProbeSignal {
  TestPointId id = 1;
  float value = 2;
}
/* An optimization to reduce msg lengths for int types*/
// message probeSignal {
//   oneof signal {
//     intSignal intSig = 1;
//     floatSignal floatSig = 2;
//   }
// }

message ProbeSignals {
  repeated ProbeSignal probeSignals = 1 [(nanopb).max_count = @PROBE_SIGNAL_MAX_COUNT@];
}

message Reset {}


/* Standard messages follow */
message Ack {
  fixed32 refCRC = 1;
}


enum ParamOperation {
  CURRENT_VAL = 0;
  GET = 1;
  SET = 2;
}

message TouchParam {
  ParamOperation operation = 1;
  oneof param {
    float paramA = 2;
    int32 paramB = 3;
  }
}

message Log {
  uint32 count = 1;
  string text = 2 [(nanopb).max_size = @LOG_TEXT_MAX_SIZE@ ]; 
  float value = 3;
}

message FirmentErrorTlm {
  uint32 armRxError = 1;
  uint32 dataLost = 2;
  uint32 modeFault = 3;
  uint32 unhandledArmEvent = 4;
  uint32 sendQueueFull = 5;
  uint32 rxQueueFull = 6;
  uint32 encodeFail = 7;
  uint32 decodeFail = 8;
  uint32 crcMismatch = 9;
  uint32 crcComputeFail = 10;
}

message ImageData {
  uint32 pageIndex = 1;
  uint32 pageCount = 2;
  uint32 chunkIndex = 3;
  uint32 chunkCountInPage = 4;
  bytes payload = 5 [(nanopb).max_size = @DATA_MSG_PAYLOAD_SIZE_MAX@ ];
}

enum PageStatusEnum {
  WRITE_FAIL = 0;
  WRITE_SUCCESS = 1;
  // REQUEST_RESEND = 2;  // Placeholder for future chunk resend feature. 
}

message PageStatus {
  uint32 pageIndex = 1;
  PageStatusEnum status = 2;
}

message Version {
  uint32 major = 1;
  uint32 minor = 2;
  uint32 patch = 3;
  uint32 buildId = 4;
  uint32 upTime = 5;
  uint32 pcbId = 6;
  uint32 deviceId = 7;
  string project = 8 [(nanopb).max_size = 8 ];
}