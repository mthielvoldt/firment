// A message structure to control a signal generator's output waveform.

syntax = "proto3";
import "nanopb.proto";

/* Project-specific messages */
enum WaveShape {
  UNSPECIFIED = 0;
  SINE = 1;
  SQUARE = 2;
  SAWTOOTH = 3;
  DC = 4;
}

enum OutputChannel {
  CHANNEL_A = 0;
  CHANNEL_B = 1;
}

message WaveformCtl {
  OutputChannel channel = 6;
  bool enabled = 5;
  WaveShape shape = 4;
  float amplitudeV = 1;
  float frequencyHz = 2;
  float offsetV = 3;
}

message WaveformTlm {
  float voltageV = 1;
  sint32 currentMa = 2;
}

message Reset {}

/** We use an enum to ID the messages.
This enum will be available in FW.
All signal messages have the same format  */
enum TestPointId {
  DISCONNECTED = 0;
  CHAN_A = 2;
  CHAN_A_INV = 3;
  CHAN_A_PLUS = 4;
  CHAN_A_PLUS_INV = 5;
  CHAN_B = 6;
}

message ProbeSignal {
  TestPointId id = 1;
  float value = 2;
}
/* An optimization to reduce msg lengths for int types*/
// message probeSignal {
//   oneof signal {
//     intSignal intSig = 1;
//     floatSignal floatSig = 2;
//   }
// }

message ProbeSignals {
  repeated ProbeSignal probeSignals = 1 [(nanopb).max_count = 6];
}

enum SampleFreq {
  SCAN_DISABLED = 0;
  FREQ_2_HZ = 2;
  FREQ_10_HZ = 10;
  FREQ_30_HZ = 30;
  FREQ_100_HZ = 100;
  FREQ_250_HZ = 250;
  FREQ_500_HZ = 500;
  FREQ_1_KHZ = 1000;
}

message RunScanCtl {
  bool isContinuous = 1;
  SampleFreq freq = 2;
  TestPointId probe_0 = 3;
  TestPointId probe_1 = 4;
  TestPointId probe_2 = 5;
  TestPointId probe_3 = 6;
  TestPointId probe_4 = 7;
  TestPointId probe_5 = 8;
}

/* Standard messages follow */
message Ack {
  fixed32 refCRC = 1;
}

message Log {
  uint32 count = 1;
  string text = 2 [(nanopb).max_size = 50]; // 64 - 17 = 47
  float value = 3;
}

enum ParamOperation {
  CURRENT_VAL = 0;
  GET = 1;
  SET = 2;
}

message TouchParam {
  ParamOperation operation = 1;
  oneof param {
    float paramA = 2;
    int32 paramB = 3;
  }
}

message Top {
  oneof sub {
    Ack Ack = 1;
    Log Log = 2;
    TouchParam TouchParam = 3;
    ProbeSignals ProbeSignals = 4;
    RunScanCtl RunScanCtl = 5;
    WaveformCtl WaveformCtl = 8;
    WaveformTlm WaveformTlm = 9;
    Reset Reset = 10;
  }
}